@page "/employees/list/{currentPage:int?}"

@inject IDbContextFactory<EmployeeManagerDbContext> ContextFactory
@inject NavigationManager NavigationManager

<PageTitle>Employees</PageTitle>

<h1>Employees</h1>

@if (Employees is null)
{
    <div>Loading...</div>
}
else
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Firstname</th>
                <th>Lastname</th>
                <th>Is Developer</th>
                <th>Department</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in Employees)
            {
                <tr>
                    <td>@employee.FirstName</td>
                    <td>@employee.LastName</td>
                    <td>@employee.IsDeveloper</td>
                    <td>@employee.Department?.Name</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public int? CurrentPage { get; set; }

    private Employee[]? Employees { get; set; }

    private const int ItemsPerPage = 5;

    // During Component Initialization and Every time a Parameter is set.
    protected override async Task OnParametersSetAsync()
    {
        if (CurrentPage is null or < 1)
        {
            NavigationManager.NavigateTo("/employees/list/1");
            return;
        }

        using var context = await ContextFactory.CreateDbContextAsync();

        var itemsToSkip = (CurrentPage.Value - 1) * ItemsPerPage;

        Employees = await context.Employees
                                        .Include(emp => emp.Department)
                                        .OrderBy(emp => emp.FirstName)
                                        .Skip(itemsToSkip)
                                        .Take(ItemsPerPage)
                                        .ToArrayAsync();
    }

}
